const { Router } = require('express');
const userModel = require("../models");
const { GoogleSpreadsheet } = require('google-spreadsheet');
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const router = Router();
const auth = require("../middleware/auth");

router.get("/welcome", auth, (req, res) => {
  res.status(200).send("Welcome ðŸ™Œ ");
});


//Raiz
router.get('/', (req, res) => {
  res.json(
    {
      "Title": "Hola mundo usando rutas!"
    }
  );
})

//Google Sheet
router.get('/customer', async (req, res) => {

  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet('1sdgAH9zQo9OYhzw4VjQWAvm3o5-OXX5G2Et1tm4E0j0');

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || 'holding@holding-346100.iam.gserviceaccount.com',
    private_key: '-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQClG2dVyQWsW2Y9\n7jFWCFJRBYoJYi37rl4ItamwxtFjlUVm47FEJ6yQvaGbQQTAb5sKNUqQwMrzGdw5\nPLplqeXfSVbXbZfScuCAkFaNCt3Qq6/Xb2uNGc4z/1mCjdhAivgV8X3mOuPvwtgG\nidRu+O5vgckDlP4YxXPfJ34xQ8aXbPlacrd4VrTmKjPk9Y7+xUvrY27qyMray0Rh\nkmf7Lfc6Cw+U020q5VZcp6NBbKDCz4MQav5eDv/rhQIwnbs37UTvDvi7fetoD+PE\nDr7XArhsEv400r6CFXimnlE9lrHlPpUGYFcRv8nnwLbRxPjTvlnY39I6FOC5Yiud\ns9IKprv/AgMBAAECggEACAM68hZV4KX04ceH/Gld+VGf/9GUcrTlGl4alJopekA5\nxIMDTM/yF3okeCDhJqej6gxpCHpavw5/ugVg9GMY5UutW7oVVqC9lW+ry5994U0b\ntQRSv1/DupFHWkcg+gzkekgkeIJeInodur+AoDwTcjTluPdHl5MpiuhjPufPoPSU\ndg+GEthdHFpdA1Sb7tVhq28BzRH8v7EUBzCIegY5hBk1o6Bud8Is6SwqPN0xSPq2\nq6cCVSjSfaN9SdQ8R3dI0rMMicWNkK4VMUx7JIbxTi/Eib1rgIoxO+g4EnAI8kYX\n59lGgTa6ifJBJxhf445Fd+dgRPJPkVNNhiPaupIsEQKBgQDRXBC5tJ60L/5s3pzD\nSaT6wmM9unHgqc1I87p3vezHhB8KN7djr2nkNZ9edH9jcUoq57PIyVivcNy0Ry8F\nQqCC+W0QzBZ6+0H8xcIbHx/6fw63g22WBmqwOKV0mx+wifQy5QZNUqGonVtGxV2h\ngO23ck0c9v9ZqvHAwAQHoyXF8QKBgQDJ45SmM5C6GqAOhmW7xmgIpzITzbcn33gb\n2F4kl/3QBYyUkcjsSgytZ9x9ONRvu12w1IIWN174WF697dE48LTt6JpxBmBzGkom\nTwRxu6lyNtISfodOju3PORf5HZtQ2zocG7Pq4Rsr+1S6Wm/f10oXs5MjBm2VQIO/\nThn32OHw7wKBgQC82PsNSGvPxWsO8U8eqRN0TlwOlluaeBCAubl9wYgQAJGvOcrm\n1JgEDoqPPS6bmNl6Ej8N4vFob7nltEAp0ovPGQbUnAO7M2G2jPwmUtEZt/qidp8n\nMOqTwsUchcD0EbyBHC2vGdZQroBjOizXPeEwFJ6Sfgqf657ea1Y3PWcZQQKBgQCh\nWJg8G4nWseCouxAi+XW7NKP437c4zoeW+VyDslTOIyEuuzPwY12uWAsGqJxej0dZ\nQvyT9LyZjUZqU92ZvAVc/UAwhAAg/Sm1ZAERRAEvnlBVJ3nLdr7nlaFrHhY6kHno\nbNtlI3IrvDkClbRDGDPGrWUx4LlDRsQD588pHNO1UQKBgCSQsy9VowZ5oJCs2GDA\nx2AyWw0fC6PQ13J2XAxDBxBPz2YWOIP62VBsCQYjA0C4BHXWbXKXLsqhXPymYxTr\njRP/0Id1zkgEJ2G72xXvr3FWjBEdGj+OOuo1H+YkNZ8vDLV4bE+sd24hPjsUmI4v\nrsDIKXms/5K+rMMPVSGX4TeF\n-----END PRIVATE KEY-----\n',
  });

  await doc.loadInfo(); // loads document properties and worksheets
  console.log(doc.title);
  // await doc.updateProperties({ title: 'renamed doc' });

  const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
  console.log(sheet.title);
  console.log(sheet.rowCount);

  // read rows
  const rows = await sheet.getRows(); // can pass in { limit, offset }
  console.log(rows[0].customerID);
  console.log(rows[0].firstName);


  const sheet1 = doc.sheetsByIndex[1]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
  console.log(sheet1.title);
  console.log(sheet1.rowCount);

  // adding / removing sheets
  //const newSheet = await doc.addSheet({ title: 'hot new sheet!' });
  //await newSheet.delete();


  res.json(
    {
      "Title": doc.title
    }
  );
})


router.post("/add_user", async (request, response) => {
  const user = new userModel(request.body);

  try {
    await user.save();
    response.send(user);
  } catch (error) {
    response.status(500).send(error);
  }
});

router.post("/login", async (req, res) => {

  // Our login logic starts here
  try {
    // Get user input
    const { email, password } = req.body;

    // Validate user input
    if (!(email && password)) {
      res.status(400).send("All input is required");
    }
    // Validate if user exist in our database
    //const user = await User.findOne({ email });

    // Initialize the sheet - doc ID is the long id in the sheets URL
    const doc = new GoogleSpreadsheet('1sdgAH9zQo9OYhzw4VjQWAvm3o5-OXX5G2Et1tm4E0j0');

    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
      // env var values are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || 'holding@holding-346100.iam.gserviceaccount.com',
      private_key: '-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQClG2dVyQWsW2Y9\n7jFWCFJRBYoJYi37rl4ItamwxtFjlUVm47FEJ6yQvaGbQQTAb5sKNUqQwMrzGdw5\nPLplqeXfSVbXbZfScuCAkFaNCt3Qq6/Xb2uNGc4z/1mCjdhAivgV8X3mOuPvwtgG\nidRu+O5vgckDlP4YxXPfJ34xQ8aXbPlacrd4VrTmKjPk9Y7+xUvrY27qyMray0Rh\nkmf7Lfc6Cw+U020q5VZcp6NBbKDCz4MQav5eDv/rhQIwnbs37UTvDvi7fetoD+PE\nDr7XArhsEv400r6CFXimnlE9lrHlPpUGYFcRv8nnwLbRxPjTvlnY39I6FOC5Yiud\ns9IKprv/AgMBAAECggEACAM68hZV4KX04ceH/Gld+VGf/9GUcrTlGl4alJopekA5\nxIMDTM/yF3okeCDhJqej6gxpCHpavw5/ugVg9GMY5UutW7oVVqC9lW+ry5994U0b\ntQRSv1/DupFHWkcg+gzkekgkeIJeInodur+AoDwTcjTluPdHl5MpiuhjPufPoPSU\ndg+GEthdHFpdA1Sb7tVhq28BzRH8v7EUBzCIegY5hBk1o6Bud8Is6SwqPN0xSPq2\nq6cCVSjSfaN9SdQ8R3dI0rMMicWNkK4VMUx7JIbxTi/Eib1rgIoxO+g4EnAI8kYX\n59lGgTa6ifJBJxhf445Fd+dgRPJPkVNNhiPaupIsEQKBgQDRXBC5tJ60L/5s3pzD\nSaT6wmM9unHgqc1I87p3vezHhB8KN7djr2nkNZ9edH9jcUoq57PIyVivcNy0Ry8F\nQqCC+W0QzBZ6+0H8xcIbHx/6fw63g22WBmqwOKV0mx+wifQy5QZNUqGonVtGxV2h\ngO23ck0c9v9ZqvHAwAQHoyXF8QKBgQDJ45SmM5C6GqAOhmW7xmgIpzITzbcn33gb\n2F4kl/3QBYyUkcjsSgytZ9x9ONRvu12w1IIWN174WF697dE48LTt6JpxBmBzGkom\nTwRxu6lyNtISfodOju3PORf5HZtQ2zocG7Pq4Rsr+1S6Wm/f10oXs5MjBm2VQIO/\nThn32OHw7wKBgQC82PsNSGvPxWsO8U8eqRN0TlwOlluaeBCAubl9wYgQAJGvOcrm\n1JgEDoqPPS6bmNl6Ej8N4vFob7nltEAp0ovPGQbUnAO7M2G2jPwmUtEZt/qidp8n\nMOqTwsUchcD0EbyBHC2vGdZQroBjOizXPeEwFJ6Sfgqf657ea1Y3PWcZQQKBgQCh\nWJg8G4nWseCouxAi+XW7NKP437c4zoeW+VyDslTOIyEuuzPwY12uWAsGqJxej0dZ\nQvyT9LyZjUZqU92ZvAVc/UAwhAAg/Sm1ZAERRAEvnlBVJ3nLdr7nlaFrHhY6kHno\nbNtlI3IrvDkClbRDGDPGrWUx4LlDRsQD588pHNO1UQKBgCSQsy9VowZ5oJCs2GDA\nx2AyWw0fC6PQ13J2XAxDBxBPz2YWOIP62VBsCQYjA0C4BHXWbXKXLsqhXPymYxTr\njRP/0Id1zkgEJ2G72xXvr3FWjBEdGj+OOuo1H+YkNZ8vDLV4bE+sd24hPjsUmI4v\nrsDIKXms/5K+rMMPVSGX4TeF\n-----END PRIVATE KEY-----\n',
    });

    await doc.loadInfo(); // loads document properties and worksheets
    //console.log(doc.title);
    // await doc.updateProperties({ title: 'renamed doc' });

    const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    // read rows
    const rows = await sheet.getRows({ limit: 100, offset: 0 }); // can pass in { limit, offset }
    let bFound = false;
    let user = { _id: "", token: "", firstName:"", password:"" };
    let rowCount = rows.length;
    for (let i = 0; i < rowCount; i++) {
      if (rows[i].email == email) {
          bFound = true;
          user._id = rows[i].customerID;
          user.password = rows[i].key;
          user.firstName = rows[i].firstName
          break;
      }
    }

    console.log("pass:", await bcrypt.hash(password, 10));
    if (bFound && (await bcrypt.compare(password, user.password))) {
      // Create token
      const token = jwt.sign(
        { user_id: user._id, email },
        process.env.TOKEN_KEY,
        {
          expiresIn: "2h",
        }
      );

      // save user token
      user.token = token;

      const sheet2 = doc.sheetsByIndex[3]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
      // read rows
      const rows2 = await sheet2.getRows({ limit: 100, offset: 0 }); // can pass in { limit, offset }
      bFound = false;
      rowCount = rows2.length;
      let ticketCount = 0;
      for (let i = 0; i < rowCount; i++) {
        console.log(rows2[i].investmentID);
        if (rows2[i].customerID == user._id) {
            ticketCount++;
        }
      }

      // user
      res.redirect("https://mholding.herokuapp.com/principal/?username="+ user.firstName +"&tickets=" + ticketCount ).status(200).json(user);
    }
    res.status(400).send("Invalid Credentials");
  } catch (err) {
    console.log(err);
  }
  // Our register logic ends here
});


router.post("/register", async (req, res) => {
  // Our register logic starts here
  try {
    // Get user input
    const { first_name, last_name, email, password } = req.body;


    console.log(req.body);
    console.log(first_name, last_name, email, password);

    // Validate user input
    if (!(email && password && first_name && last_name)) {
      res.status(400).send("All input is required");
    }

    // check if user already exist
    // Validate if user exist in our database
    //const oldUser = await User.findOne({ email });

    // Initialize the sheet - doc ID is the long id in the sheets URL
    const doc = new GoogleSpreadsheet('1sdgAH9zQo9OYhzw4VjQWAvm3o5-OXX5G2Et1tm4E0j0');

    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
      // env var values are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || 'holding@holding-346100.iam.gserviceaccount.com',
      private_key: process.env.GOOGLE_PRIVATE_KEY,
    });

    await doc.loadInfo(); // loads document properties and worksheets
    //console.log(doc.title);
    // await doc.updateProperties({ title: 'renamed doc' });

    const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    console.log(sheet.title);
    console.log(sheet.rowCount);

    // read rows
    const rows = await sheet.getRows({ limit: 100, offset: 0 }); // can pass in { limit, offset }
    console.log(rows[0].customerID);
    console.log(rows[0].firstName);

    console.log(rows);
    console.log(rows.length);

    let bFound = false;
    let user = { _id: "", token: "" };
    let rowCount = rows.length;
    for (let i = 0; i < rowCount; i++) {
      console.log(rows[i].customerID.valueType);

      if (rows[i].customerID === undefined) {
        break;
      }
      else {
        let emailhc = rows[i].email;
        console.log("correo:", emailhc);
        console.log("correo:", email);
        if (emailhc == email) {
          bFound = true;
          user._id = rows[i].customerID;
          break;
        }
        console.log(rows[i].customerID);
        console.log(rows[i].firstName);
        console.log(rows[i].email);
      }
    }
    /*const sheet1 = doc.sheetsByIndex[1]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    console.log(sheet1.title);
    console.log(sheet1.rowCount);*/

    // adding / removing sheets
    //const newSheet = await doc.addSheet({ title: 'hot new sheet!' });
    //await newSheet.delete();



    if (bFound) {
      return res.status(409).send("User Already Exist. Please Login");
    }

    //Encrypt user password
    let encryptedPassword = await bcrypt.hash(password, 10);

    /* // Create user in our database
    const user = await User.create({
      first_name,
      last_name,
      email: email.toLowerCase(), // sanitize: convert email to lowercase
      password: encryptedPassword,
    }); */

    // Create token
    const token = jwt.sign(
      { user_id: user._id, email },
      process.env.TOKEN_KEY,
      {
        expiresIn: "2h",
      }
    );
    // save user token
    user.token = token;

    // return new user
    res.status(201).json(user);
  } catch (err) {
    console.log(err);
  }
  // Our register logic ends here
});


module.exports = router;
